================================
How to Utilise 4-print_square.py
================================

In this module, the function `print_square(size)` is defined.

How it is used
==============

The `print_square` function prints a square using the character `#`, with ``size``
being the length of each side of the square.
----------------------------------------------------------------------------------

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(11)
    ###########
    ###########
    ###########
    ###########
    ###########
    ###########
    ###########
    ###########
    ###########
    ###########
    ###########

If the size provided is 0, nothing is printed
---------------------------------------------

    >>> print_square(0)

Edge Cases
==========

The `size` parameter must be an integer and greater than or equal to 0. If `size`
is not an integer or less than 0, a TypeError or ValueError is raised accordingly.
----------------------------------------------------------------------------------

    >>> print_square(11.50)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square("invalid")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

Example of no input
-------------------

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'

Example of an incorrect size
----------------------------

    >>> print_square(-1)
    Traceback (most recent call last):
    ValueError: size must be >= 0
